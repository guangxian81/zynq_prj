C++ 
  const分为顶层const和底层const。顶层const表示对象本身用const约束，底层conse表示对象指向用const约束。
  所以变量、引用、指针用顶层const约束都表示变量、引用、指针本身是const，底层const一般是指引用和指针指向的对象是const,描述符合类型。
  引用和指针的顶层const和底层const约束写法不同，对于指针来说：
  const int *const p = i ;//左侧是底层const，右侧是顶层const。
  const int &r = i;//全部是底层const，表示r不能再指向其他的变量。
  注意底层const约束后东东只能赋值拷贝给底层const约束的东东，否则就会报错。
  指针的底层const只是表示无法通过指针来修改变量，但还可以用变量本身来修改变量的值。引用也是如此
20161103x测试ok
vivado get_*命令可以得到内部的关键部件。比如ports（最顶层的端口），pin（各级模块的端口），net




INCREMENT VIVADO_HLS xilinxd 2037.05 permanent uncounted AF3E86892AA2 \
	VENDOR_STRING=License_Type:Bought HOSTID=ANY ISSUER="Xilinx \
	Inc" START=19-May-2016 TS_OK
INCREMENT Vivado_System_Edition xilinxd 2037.05 permanent uncounted \
	A1074C37F742 VENDOR_STRING=License_Type:Bought HOSTID=ANY \
	ISSUER="Xilinx Inc" START=19-May-2016 TS_OK
PACKAGE Vivado_System_Edition xilinxd 2037.05 DFF4A65E0A68 \
	COMPONENTS="ISIM ChipScopePro_SIOTK PlanAhead ChipscopePro XPS \
	ISE HLS_Synthesis AccelDSP Vivado Rodin_Synthesis \
	Rodin_Implementation Rodin_SystemBuilder \
	PartialReconfiguration AUTOESL_FLOW AUTOESL_CC AUTOESL_OPT \
	AUTOESL_SC AUTOESL_XILINX petalinux_arch_ppc \
	petalinux_arch_microblaze petalinux_arch_zynq ap_sdsoc SDK \
	SysGen Simulation Implementation Analyzer HLS Synthesis \
	VIVADO_HLS" OPTIONS=SUITE


# 2037年之前的任何Vivado版本（包括HLS、AccelDSP、System Generator、软硬CPU、SOC、嵌入式Linux、重配置等等功能）都是永久使用。使用本license文件时要改名，文件名不能有汉字和空格。
